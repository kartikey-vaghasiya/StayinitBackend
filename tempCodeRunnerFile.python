# Function to compute Leading sets
def compute_leading_sets(grammar):
    leading = {}
    for non_terminal in grammar:
        leading[non_terminal] = set()

    while True:
        change = False
        for non_terminal, productions in grammar.items():
            for production in productions:
                first_symbol = production[0]

                if first_symbol.isupper():  # Non-terminal symbol
                    if not leading[non_terminal].issuperset(leading[first_symbol]):
                        leading[non_terminal].update(leading[first_symbol])
                        change = True
                else:  # Terminal symbol
                    if not first_symbol == 'ε':
                        if not first_symbol in leading[non_terminal]:
                            leading[non_terminal].add(first_symbol)
                            change = True

        if not change:
            break

    return leading

# Function to compute Trailing sets
def compute_trailing_sets(grammar, leading):
    trailing = {}
    for non_terminal in grammar:
        trailing[non_terminal] = set()

    while True:
        change = False
        for non_terminal, productions in grammar.items():
            for production in productions:
                last_symbol = production[-1]

                if last_symbol.isupper():  # Non-terminal symbol
                    if not trailing[non_terminal].issuperset(trailing[last_symbol]):
                        trailing[non_terminal].update(trailing[last_symbol])
                        change = True

                for i in range(len(production) - 1, -1, -1):
                    symbol = production[i]
                    if symbol.isupper():  # Non-terminal symbol
                        if not trailing[non_terminal].issuperset(leading[symbol]):
                            trailing[non_terminal].update(leading[symbol])
                            change = True

        if not change:
            break

    return trailing

# Example usage
if __name__ == "__main__":
    # Define your grammar productions
    grammar = {
        'X': ['Y + Z', 'a'],
        'Y': ['b', 'ε'],
        'Z': ['c', 'd']
    }

    leading_sets = compute_leading_sets(grammar)
    trailing_sets = compute_trailing_sets(grammar, leading_sets)

    # Display Leading sets
    for non_terminal, leading in leading_sets.items():
        print(f'Leading({non_terminal}): {", ".join(leading)}')

    # Display Trailing sets
    for non_terminal, trailing in trailing_sets.items():
        print(f'Trailing({non_terminal}): {", ".join(trailing)}')
